#version 460 core
out vec4 FragColor;
in vec2 TexCoord;
in vec3 outNormal;
in vec3 FragPos;


struct Material
{
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct DirLight 
{
    vec3 ambient;
    vec3 diffuse;
    vec3 direction;
};
// uniform vec3 aColor;
uniform Material material;
uniform DirLight light;

vec3 norm;
vec3 lightDir;

vec3 calcDirLight()
{
    vec3 ambient = light.ambient *  texture(material.diffuse, TexCoord).rgb;
    float diff = max(dot(norm, lightDir),0);
    vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoord).rgb;
    return ambient+diffuse;
}


void main()
{
    norm = normalize(outNormal);
    lightDir = normalize(-light.direction);

    vec3 amb =  calcDirLight();
    vec4  result = vec4(amb, 1.0);
    FragColor = result;
}